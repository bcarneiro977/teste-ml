version: '3.8'

services:
  nginx-gateway:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - service1
      - service2
    networks:
      - app-network

  postgres-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tb_cds
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"     # Porta de comunicação para os serviços
      - "15672:15672"   # Interface Web de administração
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  service1:
    build:
      context: ./service1
      dockerfile: Dockerfile.dev
    ports:
      - "8081:8080"
    environment:
      DATABASE_URL: "postgres://postgres:postgres@postgres-db:5432/tb_cds?sslmode=disable"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    depends_on:
      - postgres-db
      - rabbitmq
    networks:
      - app-network
    volumes:
      - ./service1:/app
    working_dir: /app
    command: go run .

  service2:
    build:
      context: ./service2
      dockerfile: Dockerfile.dev
    ports:
      - "8082:8080"
    environment:
      DATABASE_URL: "postgres://postgres:postgres@postgres-db:5432/tb_cds?sslmode=disable"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    depends_on:
      - postgres-db
      - rabbitmq
    networks:
      - app-network
    volumes:
      - ./service2:/app
    working_dir: /app
    command: go run .

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
